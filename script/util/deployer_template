// SPDX-License-Identifier: MIT
pragma solidity 0.8.21;

import "forge-std/Script.sol";

import "<src/Example.sol>";
import {TransparentUpgradeableProxy} from "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol";

abstract contract <Example>Deployer is Script {
    function deploy<Example>(
        address proxyAdmin,
        <uint256 arg>
    ) internal returns (<Example> proxyAs<Example>, address proxy, address logic) {
        bytes memory initData = abi.encodeCall(<Example>.initialize, (<arg>));

        return _deploy<Example>(proxyAdmin, initData);
    }

    function deploy<Example>_NoInit(
        address proxyAdmin
    ) internal returns (<Example> proxyAs<Example>, address proxy, address logic) {
        return _deploy<Example>(proxyAdmin, "");
    }

    function _deploy<Example>(
        address proxyAdmin,
        bytes memory initData
    ) private returns (<Example> proxyAs<Example>, address proxy, address logic) {
        vm.startBroadcast(vm.envUint("PRIVATE_KEY"));

        logic = address(new <Example>());
        proxy = address(new TransparentUpgradeableProxy(logic, proxyAdmin, initData));

        vm.stopBroadcast();

        proxyAs<Example> = <Example>(proxy);
    }
}
