// SPDX-License-Identifier: MIT
pragma solidity 0.8.22;

import "forge-std/Script.sol";

import "<src/Example.sol>";
import {ProxyAdmin} from "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol";
import {TransparentUpgradeableProxy, ITransparentUpgradeableProxy} from "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol";

abstract contract <Example>Deployer is Script {
    <Example> internal <example>;
    ProxyAdmin internal <example>ProxyAdmin;
    address internal <example>Logic;

    function deploy<Example>(address proxyAdminOwner, <uint256 arg>) internal {
        bytes memory initData = abi.encodeCall(<Example>.initialize, (<arg>));

        _deploy<Example>(proxyAdminOwner, initData);
    }

    function deploy<Example>_NoInit(address proxyAdminOwner) internal {
        _deploy<Example>(proxyAdminOwner, "");
    }

    function _deploy<Example>(address proxyAdminOwner, bytes memory initData) private {
        vm.startBroadcast(vm.envUint("PRIVATE_KEY"));

        <example>Logic = address(new <Example>());
        <example> = <Example>(address(new TransparentUpgradeableProxy(<example>Logic, proxyAdminOwner, initData)));

        vm.stopBroadcast();

        <example>ProxyAdmin =
            ProxyAdmin(address(uint160(uint256(vm.load(address(<example>), hex"b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103")))));
    }
}
